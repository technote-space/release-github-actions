import type { ReposListReleasesResponseItem } from '../types';
import type { Context } from '@actions/github/lib/context';
import type { Octokit } from '@technote-space/github-action-helper/dist/types';
import { Command, GitHelper } from '@technote-space/github-action-helper';
import { Logger } from '@technote-space/github-action-log-helper';
export declare const replaceDirectory: (context: Context) => (message: string) => string;
export declare const prepareFiles: (logger: Logger, helper: GitHelper, context: Context) => Promise<void>;
export declare const createBuildInfoFile: (logger: Logger, context: Context) => Promise<void>;
export declare const clone: (logger: Logger, helper: GitHelper, context: Context) => Promise<void>;
export declare const checkBranch: (clonedBranch: string, logger: Logger, helper: GitHelper, context: Context) => Promise<void>;
export declare const config: (logger: Logger, helper: GitHelper, context: Context) => Promise<void>;
export declare const commit: (helper: GitHelper, context: Context) => Promise<boolean>;
export declare const getDeleteTestTag: (tagName: string, prefix: string, helper: GitHelper, context: Context) => Promise<Array<string>>;
export declare const deleteTestTags: (helper: GitHelper, context: Context) => Promise<void>;
export declare const push: (logger: Logger, helper: GitHelper, context: Context) => Promise<void>;
export declare const updateRelease: (release: ReposListReleasesResponseItem | undefined, logger: Logger, octokit: Octokit, context: Context) => Promise<void>;
export declare const copyFiles: (logger: Logger, command: Command, context: Context) => Promise<void>;
export declare const prepareCommit: (logger: Logger, command: Command, helper: GitHelper, context: Context) => Promise<void>;
export declare const deploy: (octokit: Octokit, context: Context) => Promise<void>;
