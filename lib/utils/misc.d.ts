import type { Context } from '@actions/github/lib/context';
type CommandType = string | {
    command: string;
    args?: Array<string> | undefined;
    quiet?: boolean | undefined;
    altCommand?: string | undefined;
    suppressError?: boolean | undefined;
    suppressOutput?: boolean | undefined;
    stderrToStdout?: boolean | undefined;
};
export declare const getSearchBuildCommandTargets: () => Array<string>;
export declare const detectBuildCommands: (dir: string, runCommand: string, commands: Array<string>) => Array<string>;
export declare const getBackupCommands: (buildDir: string, pushDir: string) => Array<CommandType>;
export declare const getRestoreBackupCommands: (buildDir: string, pushDir: string) => Array<CommandType>;
export declare const getClearFilesCommands: (targets: Array<string>) => Array<CommandType>;
export declare const getBuildCommands: (buildDir: string, pushDir: string) => Array<CommandType>;
export declare const getCommitMessage: () => string;
export declare const getCommitName: () => string;
export declare const getCommitEmail: () => string;
export declare const getBranchNames: () => Array<string>;
export declare const getFetchDepth: () => number;
export declare const getTestTagPrefix: () => string;
export declare const isTestTag: (tagName: string) => boolean;
export declare const getTestTag: (tagName: string) => string;
export declare const getOriginalTagPrefix: () => string;
export declare const isCreateMajorVersionTag: () => boolean;
export declare const isCreateMinorVersionTag: () => boolean;
export declare const isCreatePatchVersionTag: () => boolean;
export declare const isEnabledCleanTestTag: () => boolean;
export declare const getOutputBuildInfoFilename: () => string;
export declare const getMajorTag: (tagName: string) => string;
export declare const getMinorTag: (tagName: string) => string;
export declare const getPatchTag: (tagName: string) => string;
export declare const isValidTagName: (tagName: string) => boolean;
export declare const getCreateTags: (tagName: string) => Array<string>;
export declare const getParams: ((context: Context) => {
    workDir: string;
    buildDir: string;
    pushDir: string;
    branchName: string;
    branchNames: Array<string>;
    tagName: string;
}) & import("memize").MemizeMemoizedFunction;
export declare const getReplaceDirectory: (context: Context) => {
    [key: string]: string;
};
export declare const isValidContext: (context: Context) => boolean;
export {};
