import { Logger } from '@technote-space/github-action-log-helper';
/**
 * Command
 */
export default class Command {
    private logger;
    private useExec;
    /**
     * @param {Logger} logger logger
     * @param {boolean} useExec use exec?
     */
    constructor(logger: Logger, useExec?: boolean);
    /**
     * @param {string} command command
     * @param {boolean} quiet quiet?
     * @param {boolean} suppressError suppress error?
     * @return {string} command
     */
    private getCommand;
    /**
     * @param {string} command command
     * @param {string} altCommand alt command
     * @param {boolean} quiet quiet?
     * @param {ExecException} error error
     * @return {string} message
     */
    private getRejectedErrorMessage;
    /**
     * @param {string} command command
     * @param {string|undefined} altCommand alt command
     * @param {boolean} stderrToStdout output to stdout instead of stderr
     * @param {string} stdout stdout
     * @param {string} stderr stderr
     * @return {object} command result
     */
    private getCommandResult;
    /**
     * @param {string} stdout stdout
     * @param {boolean} quiet quiet?
     * @param {boolean} suppressOutput suppress output?
     */
    private outputStdout;
    /**
     * @param {string} stderr stderr
     * @param {boolean} quiet quiet?
     * @param {boolean} suppressOutput suppress output?
     * @param {boolean} stderrToStdout output to stdout instead of stderr
     */
    private outputStderr;
    /**
     * @param {string} command command
     * @param {boolean} quiet quiet?
     * @param {boolean} suppressOutput suppress output?
     * @param {boolean} stderrToStdout output to stdout instead of stderr
     * @param {string|undefined} cwd cwd
     * @return {Promise<object>} output
     */
    private execCommand;
    /**
     * @param {string} command command
     * @param {string|undefined} altCommand alt command
     * @param {boolean} quiet quiet?
     * @param {boolean} suppressOutput suppress output?
     * @param {boolean} stderrToStdout output to stdout instead of stderr
     * @param {function} resolve resolve
     * @param {function} reject reject
     * @return {void} void
     */
    private execCallback;
    /**
     * @param {object} options options
     * @param {string} options.command command
     * @param {string[]|undefined} options.args command
     * @param {string|undefined} options.cwd cwd
     * @param {boolean|undefined} options.quiet quiet?
     * @param {string|undefined} options.altCommand alt command
     * @param {boolean|undefined} options.suppressError suppress error?
     * @param {boolean|undefined} options.suppressOutput suppress output?
     * @param {boolean|undefined} options.stderrToStdout output to stdout instead of stderr
     * @return {Promise<object>} output
     */
    execAsync: (options: {
        command: string;
        args?: string[];
        cwd?: string;
        quiet?: boolean;
        altCommand?: string;
        suppressError?: boolean;
        suppressOutput?: boolean;
        stderrToStdout?: boolean;
    }) => Promise<{
        stdout: string;
        stderr: string;
        command: string;
    }>;
}
