"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.showActionInfo = exports.getGitUrl = exports.getGitUrlWithToken = exports.getRepository = exports.getSender = exports.getTagName = exports.isCreateTag = exports.isWorkflowRun = exports.isManualEvent = exports.isCustomEvent = exports.isCron = exports.isIssue = exports.isPr = exports.isPush = exports.isRelease = void 0;
const path_1 = __importDefault(require("path"));
const utils_1 = require("./utils");
exports.isRelease = (context) => 'release' === context.eventName;
exports.isPush = (context) => 'push' === context.eventName;
exports.isPr = (context) => 'pull_request' === context.eventName || 'pull_request_target' === context.eventName;
exports.isIssue = (context) => 'issues' === context.eventName;
exports.isCron = (context) => 'schedule' === context.eventName;
exports.isCustomEvent = (context) => 'repository_dispatch' === context.eventName;
exports.isManualEvent = (context) => 'workflow_dispatch' === context.eventName;
exports.isWorkflowRun = (context) => 'workflow_run' === context.eventName;
exports.isCreateTag = (context) => 'create' === context.eventName && 'tag' === context.payload.ref_type;
exports.getTagName = (context) => exports.isRelease(context) ? context.payload.release.tag_name : (/^refs\/tags\//.test(context.ref) ? context.ref.replace(/^refs\/tags\//, '') : '');
exports.getSender = (context) => context.payload.sender && context.payload.sender.type === 'User' ? context.payload.sender.login : false;
exports.getRepository = (context) => `${context.repo.owner}/${context.repo.repo}`;
const getGitUrlAuthInfo = (token) => token ? `${utils_1.getActor()}:${token}@` : '';
exports.getGitUrlWithToken = (context, token) => `https://${getGitUrlAuthInfo(token)}github.com/${context.repo.owner}/${context.repo.repo}.git`;
exports.getGitUrl = (context, accessTokenRequired = true) => exports.getGitUrlWithToken(context, utils_1.getAccessToken(accessTokenRequired));
exports.showActionInfo = (rootDir, logger, context) => {
    const info = utils_1.getBuildInfo(path_1.default.resolve(rootDir, 'build.json'));
    const tagName = exports.getTagName(context);
    const separator = '==================================================';
    logger.log();
    logger.log(separator);
    if (false !== info) {
        if ('owner' in info) {
            logger.log('Version:  %s/%s@%s', info.owner, info.repo, info.tagName);
            logger.log('          %s', info.sha);
        }
        else {
            logger.log('Version:  %s', info.tagName);
            logger.log('          %s', info.sha);
        }
    }
    logger.log('Event:    %s', context.eventName);
    logger.log('Action:   %s', context.payload.action);
    logger.log('sha:      %s', context.sha);
    logger.log('ref:      %s', context.ref);
    if (tagName) {
        logger.log('Tag name: %s', tagName);
    }
    if (context.payload.issue) {
        logger.log('Labels:');
        context.payload.issue.labels.map(label => label.name).forEach(label => logger.log('  - %s', label));
    }
    if (context.payload.pull_request) {
        logger.log('Labels:');
        context.payload.pull_request.labels.map(label => label.name).forEach(label => logger.log('  - %s', label));
    }
    logger.log('owner:    %s', context.repo.owner);
    logger.log('repo:     %s', context.repo.repo);
    logger.log();
    logger.startProcess('Dump context');
    console.log(utils_1.mask(context));
    logger.startProcess('Dump Payload');
    console.log(utils_1.mask(context.payload));
    logger.endProcess();
    logger.log(separator);
    logger.log();
};
