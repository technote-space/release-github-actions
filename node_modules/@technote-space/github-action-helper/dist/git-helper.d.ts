import { Context } from '@actions/github/lib/context';
import { Logger } from './index';
declare type CommandType = string | {
    command: string;
    args?: string[];
    quiet?: boolean;
    altCommand?: string;
    suppressError?: boolean;
    suppressOutput?: boolean;
    stderrToStdout?: boolean;
};
/**
 * Git Helper
 */
export default class GitHelper {
    private readonly logger;
    private readonly command;
    private readonly cloneDepth;
    private readonly filter;
    private readonly token;
    private origin?;
    private quietIfNotOrigin;
    /**
     * @param {Logger} logger logger
     * @param {object} options options
     * @param {number|undefined} options.depth depth
     * @param {function|undefined} options.filter filter
     */
    constructor(logger: Logger, options?: {
        depth?: number;
        filter?: (string: string) => boolean;
        token?: string;
    });
    /**
     * @param {string} workDir work dir
     * @param {string[]} commands commands
     * @return {Promise<{}[]>} void
     */
    runCommand: (workDir: string, commands: CommandType | CommandType[]) => Promise<{
        command: string;
        stdout: string[];
        stderr: string[];
    }[]>;
    /**
     * @param {string} workDir work dir
     * @param {boolean} refresh refresh?
     * @return {Promise<void>} void
     */
    private initialize;
    /**
     * @param {string|boolean} origin origin
     * @param {boolean} quiet quiet?
     */
    useOrigin: (origin: string | boolean, quiet?: boolean | undefined) => void;
    /**
     * @return {string} origin name
     */
    getRemoteName: () => string | never;
    /**
     * @param {Context} context context
     * @return {string} origin
     */
    private getRemote;
    /**
     * @param {string} workDir work dir
     * @param {Context} context context
     * @return {Promise<void>} void
     */
    addOrigin: (workDir: string, context: Context) => Promise<void>;
    /**
     * @return {boolean} is quiet?
     */
    private isQuiet;
    /**
     * @param {string} workDir work dir
     * @return {Promise<string>} branch name
     */
    getCurrentBranchName: (workDir: string) => Promise<string>;
    /**
     * @param {string} workDir work dir
     * @param {string} branch branch
     * @param {Context} context context
     * @return {Promise<void>} void
     */
    cloneBranch: (workDir: string, branch: string, context: Context) => Promise<void>;
    /**
     * @param {string} workDir work dir
     * @param {Context} context context
     * @return {Promise<void>} void
     */
    private clonePR;
    /**
     * @param {string} workDir work dir
     * @param {Context} context context
     * @return {Promise<void>} void
     */
    clone: (workDir: string, context: Context) => Promise<void>;
    /**
     * @param {string} workDir work dir
     * @param {string} branch branch
     * @return {Promise<void>} void
     */
    gitInit: (workDir: string, branch: string) => Promise<void>;
    /**
     * @param {string} workDir work dir
     * @param {Context} context context
     * @param {string[]} options options
     * @param {string[]} refspec refspec
     * @return {Promise<void>} void
     */
    fetchOrigin: (workDir: string, context: Context, options?: string[] | undefined, refspec?: string[] | undefined) => Promise<void>;
    /**
     * @param {string} workDir work dir
     * @param {Context} context context
     * @return {Promise<void>} void
     */
    checkout: (workDir: string, context: Context) => Promise<void>;
    /**
     * @param {string} workDir work dir
     * @param {string} branch branch
     * @param {Context} context context
     * @return {Promise<void>} void
     */
    fetchBranch: (workDir: string, branch: string, context: Context) => Promise<void>;
    /**
     * @param {string} workDir work dir
     * @param {string} branch branch
     * @return {Promise<void>} void
     */
    createBranch: (workDir: string, branch: string) => Promise<void>;
    /**
     * @param {string} workDir work dir
     * @param {string} branch branch
     * @return {Promise<void>} void
     */
    switchBranch: (workDir: string, branch: string) => Promise<void>;
    /**
     * @param {string} workDir work dir
     * @param {string} name name
     * @param {string} email email
     * @return {Promise<void>} void
     */
    config: (workDir: string, name: string, email: string) => Promise<void>;
    /**
     * @param {string} workDir work dir
     * @return {Promise<string[]>} diff
     */
    getDiff: (workDir: string) => Promise<string[]>;
    /**
     * @param {string} workDir work dir
     * @param {string} baseRef base ref
     * @param {string} compareRef compare ref
     * @param {string} diffFilter diff filter
     * @param {string} dot dot
     * @return {Promise<string[]>} diff
     */
    getRefDiff: (workDir: string, baseRef: string, compareRef: string, diffFilter?: string | undefined, dot?: ".." | "..." | undefined) => Promise<string[]>;
    /**
     * @param {string} workDir work dir
     * @return {Promise<boolean>} result
     */
    checkDiff: (workDir: string) => Promise<boolean>;
    /**
     * @param {string} workDir work dir
     * @param {string} message message
     * @param {object} options options
     */
    commit: (workDir: string, message: string, options?: {
        count?: number | undefined;
        allowEmpty?: boolean | undefined;
        args?: string[] | undefined;
    } | undefined) => Promise<boolean>;
    /**
     * @param {string} workDir work dir
     * @param {string} message message
     * @param {object} options options
     */
    makeCommit: (workDir: string, message: string, options?: {
        count?: number | undefined;
        allowEmpty?: boolean | undefined;
        args?: string[] | undefined;
    } | undefined) => Promise<void>;
    /**
     * @param {string} workDir work dir
     * @param {object} options options
     * @return {Promise<string[]>} tags
     */
    getTags: (workDir: string, options?: {
        quiet?: boolean | undefined;
        suppressOutput?: boolean | undefined;
    } | undefined) => Promise<string[]>;
    /**
     * @param {string} workDir work dir
     * @param {Context} context context
     * @param {number} splitSize split size
     * @return {Promise<void>} void
     * @see https://qiita.com/ngyuki/items/ca7bed067d7e538fd0cd
     */
    fetchTags: (workDir: string, context: Context, splitSize?: number) => Promise<void>;
    /**
     * @param {string} workDir work dir
     * @param {string|string[]} tags tags
     * @param {Context} context context
     * @param {number} splitSize split size
     * @return {Promise<void>} void
     */
    deleteTag: (workDir: string, tags: string | string[], context: Context, splitSize?: number) => Promise<void>;
    /**
     * @param {string} workDir work dir
     * @param {string} newTag new tag
     * @param {string} fromTag from tag
     * @param {Context} context context
     * @return {Promise<void>} void
     */
    copyTag: (workDir: string, newTag: string, fromTag: string, context: Context) => Promise<void>;
    /**
     * @param {string} workDir work dir
     * @param {string|string[]} tags tags
     * @param {number} splitSize split size
     * @return {Promise<void>} void
     */
    deleteLocalTag: (workDir: string, tags: string | string[], splitSize?: number) => Promise<void>;
    /**
     * @param {string} workDir work dir
     * @param {string|string[]} tags tags
     * @return {Promise<void>} void
     */
    addLocalTag: (workDir: string, tags: string | string[]) => Promise<void>;
    /**
     * @param {string} workDir work dir
     * @param {string} branch branch
     * @param {Context} context context
     * @param {object} options options
     * @return {Promise<void>} void
     */
    push: (workDir: string, branch: string, context: Context, options?: {
        withTag?: boolean | undefined;
        force?: boolean | undefined;
        args?: string[] | undefined;
    } | undefined) => Promise<void>;
    /**
     * @param {string} workDir work dir
     * @param {string} branch branch
     * @param {Context} context context
     * @return {Promise<void>} void
     */
    forcePush: (workDir: string, branch: string, context: Context) => Promise<void>;
    /**
     * @param {string} workDir work dir
     * @return {string} tag
     */
    getLastTag: (workDir: string) => Promise<string>;
    /**
     * @param {string} workDir work dir
     * @return {string} tag
     */
    getNewPatchVersion: (workDir: string) => Promise<string>;
    /**
     * @param {string} workDir work dir
     * @return {string} tag
     */
    getNewMinorVersion: (workDir: string) => Promise<string>;
    /**
     * @param {string} workDir work dir
     * @return {string} tag
     */
    getNewMajorVersion: (workDir: string) => Promise<string>;
}
export {};
