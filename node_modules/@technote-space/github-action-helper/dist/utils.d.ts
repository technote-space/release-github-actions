import { Context } from '@actions/github/lib/context';
import { Octokit } from './types';
declare type RefObject = {
    ref: string;
};
export declare const getBuildInfo: (filepath: string) => {
    owner?: string;
    repo?: string;
    sha?: string;
    ref?: string;
    tagName: string;
    branch: string;
    tags: string[];
    'updated_at': string;
} | false;
export declare const isCloned: (workDir: string) => boolean;
export declare const parseVersion: (version: string, options?: {
    fill?: boolean | undefined;
    cut?: boolean | undefined;
    slice?: number | undefined;
    length?: number | undefined;
    strict?: boolean | undefined;
} | undefined) => {
    core: string;
    preRelease: string | undefined;
    build: string | undefined;
    fragments: Array<string>;
} | undefined;
export declare const normalizeVersion: <T>(version: string, options?: {
    fill?: boolean | undefined;
    cut?: boolean | undefined;
    slice?: number | undefined;
    length?: number | undefined;
    onlyCore?: boolean | undefined;
    fallback?: T | undefined;
} | undefined) => string | T | undefined;
export declare const isValidSemanticVersioning: (version: string, strict?: boolean | undefined) => boolean;
export declare const isSemanticVersioningTagName: (tagName: string) => boolean;
export declare const isRef: (ref: string | RefObject) => boolean;
export declare const isBranch: (ref: string | RefObject) => boolean;
export declare const isTagRef: (ref: string | RefObject) => boolean;
export declare const isRemoteBranch: (ref: string | RefObject) => boolean;
export declare const isPrRef: (ref: string | RefObject) => boolean;
export declare const getPrMergeRef: (ref: string | RefObject) => string;
export declare const getPrHeadRef: (ref: string | RefObject) => string;
export declare const getRefForUpdate: (ref: string | RefObject) => string;
export declare const getBranch: (ref: string | RefObject, defaultIsEmpty?: boolean) => string;
export declare const getPrBranch: (context: Context) => string;
export declare const normalizeRef: (ref: string | RefObject) => string;
export declare const trimRef: (ref: string | RefObject) => string;
export declare const getTag: (ref: string | RefObject) => string;
export declare const getRemoteRefspec: (ref: string | RefObject) => string;
export declare const getLocalRefspec: (ref: string | RefObject, origin?: string) => string;
export declare const getRefspec: (ref: string | RefObject, origin?: string) => string;
export declare const getAccessToken: (required: boolean) => string;
export declare const getOctokit: (token?: string | undefined) => Octokit;
export declare const getActor: () => string;
export declare const escapeRegExp: (text: string) => string;
export declare const getRegExp: (value: string) => RegExp;
export declare const getPrefixRegExp: (value: string, flags?: string) => RegExp;
export declare const getSuffixRegExp: (value: string, flags?: string) => RegExp;
export declare const getBoolValue: (input: string) => boolean;
export declare const uniqueArray: <T>(array: T[]) => T[];
export declare const getWorkspace: () => string;
export declare const split: (value: string, separator?: string | RegExp, limit?: number | undefined) => string[];
export declare const getArrayInput: (name: string, required?: boolean, separator?: string, unique?: boolean) => string[];
export declare const sleep: (millisecond: number) => Promise<void>;
export declare const useNpm: (workDir: string, pkgManager?: string) => boolean;
export declare const replaceAll: (string: string, key: string | RegExp, value: string) => string;
export declare const generateNewVersion: (lastTag: string, position?: number | undefined) => string;
export declare const generateNewPatchVersion: (lastTag: string) => string;
export declare const generateNewMinorVersion: (lastTag: string) => string;
export declare const generateNewMajorVersion: (lastTag: string) => string;
export declare const arrayChunk: <T>(array: T[], size?: number) => T[][];
export declare const versionCompare: (version1: string, version2: string, checkDifferentLevel?: boolean) => number;
export declare const mask: (value: any, target?: string) => any;
export declare const replaceVariables: (string: string, variables: {
    key: string;
    replace: (() => Promise<string> | string) | string;
}[]) => Promise<string>;
export declare const isCommandDebug: () => boolean;
export declare const isOutputDebug: () => boolean;
export declare const objectGet: <T>(value: {
    [key: string]: any;
} | null | undefined, key: string, defaultValue?: T | undefined) => T | undefined;
export declare const ensureNotNullValue: <T>(value: T | null | undefined, defaultValue: T) => T;
export declare const ensureNotNull: (value: string | null | undefined) => string;
export {};
