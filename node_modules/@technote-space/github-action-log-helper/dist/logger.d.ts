declare const COLOR_MAP: {
    readonly black: 0;
    readonly red: 1;
    readonly green: 2;
    readonly yellow: 3;
    readonly blue: 4;
    readonly magenta: 5;
    readonly cyan: 6;
    readonly white: 7;
};
declare const ATTRIBUTE_MAP: {
    readonly none: 0;
    readonly bold: 1;
    readonly underline: 4;
    readonly italic: 3;
};
declare type Color = keyof typeof COLOR_MAP;
declare type Attribute = keyof typeof ATTRIBUTE_MAP;
declare type Setting = {
    color?: Color;
    backColor?: Color;
    attribute?: Attribute;
};
/**
 * Logger
 */
export default class Logger {
    private notUseGroup;
    private readonly replacer;
    private static isRequiredEndGroup;
    /**
     * @param {function|undefined} replacer replacer
     * @param {boolean} notUseGroup not use group?
     */
    constructor(replacer?: (string: string) => string, notUseGroup?: boolean);
    /**
     * @param {string} message message
     * @return {string[]} messages
     */
    private splitMessage;
    /**
     * @param {string} message message
     * @param {any[]} args args
     * @return {string} output string
     */
    private getOutputString;
    /**
     * @param {function} output output function
     * @param {function|null} replacer replacer
     * @param {string|string[]} message message
     * @param {any[]} args args
     */
    private multiLineOutput;
    /**
     * @param {string|string[]} message message
     * @param {any[]} args args
     * @return {void}
     */
    log: (message?: string | string[] | undefined, ...args: any[]) => void;
    /**
     * @param {string|string[]} message message
     * @param {any[]} args args
     * @return {void}
     */
    info: (message: string | string[], ...args: any[]) => void;
    /**
     * @param {string|string[]} message message
     * @param {any[]} args args
     * @return {void}
     */
    debug: (message: string | string[], ...args: any[]) => void;
    /**
     * @param {string|string[]} message message
     * @param {any[]} args args
     * @return {void}
     */
    error: (message: string | string[], ...args: any[]) => void;
    /**
     * @param {string|string[]} message message
     * @param {any[]} args args
     * @return {void}
     */
    warn: (message: string | string[], ...args: any[]) => void;
    /**
     * @param {string|string[]} message message
     * @param {any[]} args args
     * @return {void}
     */
    displayCommand: (message: string | string[], ...args: any[]) => void;
    /**
     * @param {string|string[]} message message
     * @return {void}
     */
    displayStdout: (message: string | string[]) => void;
    /**
     * @param {string|string[]} message message
     * @return {void}
     */
    displayStderr: (message: string | string[]) => void;
    /**
     * @param {string} message message
     * @param {any[]} args args
     * @return {void}
     */
    startProcess: (message: string, ...args: any[]) => void;
    /**
     * @return {void}
     */
    endProcess: () => void;
    /**
     * @param {string} string string
     * @param {Setting|undefined} setting setting
     * @return {string} color string
     */
    getColorString: (string: string, setting?: Setting | undefined) => string;
    /**
     * @param {string} string string
     * @param {Setting|undefined} setting setting
     * @return {string} color string
     */
    c: (string: string, setting?: Setting | undefined) => string;
    /**
     * @return {void}
     */
    static resetForTesting: () => void;
}
export {};
